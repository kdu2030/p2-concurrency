diff --git a/./.vscode/settings.json b/./.vscode/settings.json
new file mode 100644
index 0000000..8ef5232
--- /dev/null
+++ b/./.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "files.associations": {
+        "spinlock.h": "c",
+        "stdbool.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/home/kd5eyn/p2-concurrency/exp1/counter.c b/./counter.c
index 7c73ef5..03a5a4a 100755
--- a/home/kd5eyn/p2-concurrency/exp1/counter.c
+++ b/./counter.c
@@ -8,6 +8,7 @@
 #include <string.h>
 #include <errno.h>
 #include <pthread.h>
+#include <stdbool.h>
 
 #define ONE_BILLION 1000000000L;
 
@@ -20,7 +21,8 @@ int spinLockFlag = 0;
 int c_and_sFlag = 0;
 
 pthread_mutex_t mutex;
-// todo: define a spinlock variable 
+// TODO: define a spinlock variable 
+bool is_locked;
 
 char const * getTestName() {
     if(mutexFlag)
@@ -56,18 +58,29 @@ void add_iterate(int val, int iterations) {
             pthread_mutex_unlock(&mutex);
         }
         else if(spinLockFlag) {
-            // todo: lock the spinlock
+            // If is_locked is true initially, we will set is_locked to true and return true, so we continue looping.
+            // If is_locked is false intially, we will set is_locked to true and return false, so we break out of the while loop.
+            while(__atomic_test_and_set(&is_locked, __ATOMIC_SEQ_CST));
             add(&the_counter, val);
-            // todo: unlock the spinlock
+            // Unlock by setting is_locked to false, so another thread can set it to true.
+            __atomic_store_n(&is_locked, false, __ATOMIC_SEQ_CST);
         }
         else if(c_and_sFlag) {
-            long long oldVal, newVal;
-			
-			/* todo: change the following, so that it updates @the_counter atomically using CAS */
-			oldVal = the_counter;
-			newVal = oldVal + val;
-			the_counter = newVal; 
-			/* --- */
+            // long long oldVal, newVal;
+
+			/* TODO: change the following, so that it updates @the_counter atomically using CAS */
+			// oldVal = the_counter;
+			// newVal = oldVal + val;
+			// the_counter = newVal; 
+			// /* --- */
+            long long old_val, new_val; 
+            old_val = the_counter;
+            do{          
+                new_val = old_val + val;
+                // If the counter is the same as the old value, then we are okay to update it to the new value
+                // If the counter is different, other threads changed it, so we update old value with the new counter, and calculate
+            }while(!__atomic_compare_exchange_n(&the_counter, &old_val, new_val, 0, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST));
+
         }
         else
             add(&the_counter, val);
diff --git a/./experiment.sh b/./experiment.sh
new file mode 100755
index 0000000..da708ed
--- /dev/null
+++ b/./experiment.sh
@@ -0,0 +1,10 @@
+#!/usr/bin/bash
+for i in {0..9}:
+do
+    echo "Trial $i "
+    ./counter-nolock --iterations=100000 --threads=10
+    ./counter --iterations=100000 --threads=10 --sync=m
+    ./counter --iterations=100000 --threads=10 --sync=s
+    ./counter --iterations=100000 --threads=10 --sync=c
+    echo ""
+done
\ No newline at end of file
diff --git a/./kd5eyn.diff b/./kd5eyn.diff
new file mode 100644
index 0000000..e69de29
diff --git a/home/kd5eyn/p2-concurrency/exp1/staged/run.sh b/home/kd5eyn/p2-concurrency/exp1/staged/run.sh
deleted file mode 100755
index 055329b..0000000
--- a/home/kd5eyn/p2-concurrency/exp1/staged/run.sh
+++ /dev/null
@@ -1,76 +0,0 @@
-#!/bin/bash
-
-rm -f lab2_add.csv
-rm -f lab2_list.csv
-touch lab2_add.csv
-touch lab2_list.csv
-
-#add-none test
-for i in 1, 2, 4, 8, 12
-do
-    for j in 10, 20, 40, 80, 100, 1000, 10000, 100000
-    do
-        ./lab2_add --iterations=$j --threads=$i >> lab2_add.csv
-    done
-done
-
-#add-m test
-for i in 1, 2, 4, 8, 12
-do
-        for j in 10, 20, 40, 80, 100, 1000, 10000, 100000
-        do
-                ./lab2_add --iterations=$j --threads=$i --sync=m >> lab2_add.csv
-        done
-done
-
-#add-s test
-for i in 1, 2, 4, 8, 12
-do
-        for j in 10, 20, 40, 80, 100, 1000, 10000, 100000
-        do
-                ./lab2_add --iterations=$j --threads=$i --sync=s >> lab2_add.csv
-        done
-done
-
-#add-c test
-for i in 1, 2, 4, 8, 12
-do
-        for j in 10, 20, 40, 80, 100, 1000, 10000, 100000
-        do
-                ./lab2_add --iterations=$j --threads=$i --sync=c >> lab2_add.csv
-        done
-done
-
-#single thread test
-for j in 10, 100, 1000, 10000, 20000
-do
-    ./lab2_list --iterations=$j --threads=1 >> lab2_list.csv
-done
-
-#numerous threads for lab2_list
-for i in 2, 4, 8, 12
-do
-    for j in 1, 10, 100, 1000
-    do
-        ./lab2_list --iterations=$j --threads=$i >> lab2_list.csv
-    done
-done
-
-
-#test for appropriate number of threads to overcome startup costs
-
-for i in 1, 2, 4, 8, 12, 16, 24
-do
-    ./lab2_list --iterations=1000 --threads=$i >> lab2_list.csv
-done
-
-for i in 1, 2, 4, 8, 12, 16, 24
-do
-        ./lab2_list --iterations=1000 --threads=$i --sync=m >> lab2_list.csv
-done
-
-for i in 1, 2, 4, 8, 12, 16, 24
-do
-        ./lab2_list --iterations=1000 --threads=$i --sync=s >> lab2_list.csv
-done
-
